// Mocks generated by Mockito 5.4.0 from annotations
// in chopper_network/test/app/domain/use_case/use_case_mock_gen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chopper_network/core/error/failure.dart' as _i5;
import 'package:chopper_network/features/app/domain/entity/anime_entity.dart'
    as _i7;
import 'package:chopper_network/features/app/domain/entity/character_entity.dart'
    as _i6;
import 'package:chopper_network/features/app/domain/repository/anime_repository.dart'
    as _i3;
import 'package:chopper_network/features/app/domain/repository/native_repository.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnimeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRepository extends _i1.Mock implements _i3.AnimeRepository {
  MockAnimeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CharacterEntity>>> getCharacters(
          {required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, List<_i6.CharacterEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.CharacterEntity>>(
          this,
          Invocation.method(
            #getCharacters,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CharacterEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.AnimePaginationEntity>> getTopAnime(
          {required int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopAnime,
          [],
          {#page: page},
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, _i7.AnimePaginationEntity>>.value(
            _FakeEither_0<_i5.Failure, _i7.AnimePaginationEntity>(
          this,
          Invocation.method(
            #getTopAnime,
            [],
            {#page: page},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.AnimePaginationEntity>>);
}

/// A class which mocks [NativeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNativeRepository extends _i1.Mock implements _i8.NativeRepository {
  MockNativeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> getNetworkStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNetworkStatus,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #getNetworkStatus,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [AnimeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class FakeRepo extends _i1.Mock implements _i3.AnimeRepository {
  FakeRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CharacterEntity>>> getCharacters(
          {required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, List<_i6.CharacterEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.CharacterEntity>>(
          this,
          Invocation.method(
            #getCharacters,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CharacterEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.AnimePaginationEntity>> getTopAnime(
          {required int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopAnime,
          [],
          {#page: page},
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, _i7.AnimePaginationEntity>>.value(
            _FakeEither_0<_i5.Failure, _i7.AnimePaginationEntity>(
          this,
          Invocation.method(
            #getTopAnime,
            [],
            {#page: page},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.AnimePaginationEntity>>);
}

/// A class which mocks [NativeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class FakeNativeRepo extends _i1.Mock implements _i8.NativeRepository {
  FakeNativeRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> getNetworkStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNetworkStatus,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #getNetworkStatus,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
